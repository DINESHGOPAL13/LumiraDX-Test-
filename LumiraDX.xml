<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ded6d416-c119-4a1a-935c-8a858b99ddad" activeEnvironment="Default" name="LumiraDX API Project" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="586a4311-32f1-498d-ac57-b8304ae95072" wadlVersion="http://wadl.dev.java.net/2009/02" name="LumiraDX Blog API" type="rest" basePath="/api" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Prototype Blog API v0.2

[swagger.json](/api/swagger.json)</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:8888</con:endpoint></con:endpoints><con:resource name="/blog/categories/" path="/blog/categories/" id="82a47323-ebad-42a8-bd83-fef12048cb9b"><con:settings/><con:parameters/><con:method name="get_category_collection" id="313ce227-0d73-4cc0-b38f-9abe43e92588" method="GET"><con:description>
Returns list of blog categories</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:cat="http://localhost/api/blog/categories/">cat:Fault</con:element></con:representation><con:request name="Request 1" id="c5532a9d-649b-4b27-8de7-59852786b806" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="post_category_collection" id="907f2662-210e-4e0e-9564-fa4bcad66d7e" method="POST"><con:description>* Send a JSON object with the new category's name in the request body.

```
{
  "name": "New Category Name"
}
```
Creates a new blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:cat="http://localhost/api/blog/categories/">cat:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="c54b294e-fa42-4ec8-9ac6-008d41356905" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
  "id": 102,
  "name": "TEST"
}</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/categories/{id}" path="/blog/categories/{id}" id="e532e438-8978-4a8a-8891-a08ae568c8ba"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="get_category_item" id="c5ef4eb6-1faf-48ad-9f2d-e950844fe20d" method="GET"><con:description>
Returns a category with a list of posts</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:loc="http://localhost/">loc:Fault</con:element></con:representation><con:request name="Request 1" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="102" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="put_category_item" id="9997fcd4-0db6-404d-913a-98e4b0a9461e" method="PUT"><con:description>Use this method to change the name of a blog category.

* Send a JSON object with the new name in the request body.

```
{
  "name": "New Category Name"
}
```

* Specify the ID of the category to modify in the request URL path.
Updates a blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:ns="http://localhost/api/blog/categories/100">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="a924914a-d494-4226-b729-d0781953c2b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
  
  "name": "TEST3"
}</con:request><con:originalUri>http://localhost/api/blog/categories/100</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="id" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="delete_category_item" id="15eed683-52b7-4e5f-a83c-992ec82ef2e7" method="DELETE"><con:description>
Deletes blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>409</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://localhost/api/blog/categories/122">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="454e1f22-6cdd-439f-aa45-5d4009d87460" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="id" value="id" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/blog/posts/" path="/blog/posts/" id="1d31cea0-677d-44b4-8201-3ac2291015c5"><con:settings/><con:parameters/><con:method name="get_posts_collection" id="4194bb51-c857-46f1-9fda-b1b0f552f11e" method="GET"><con:description>
Returns list of blog posts</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="b615f57f-0e51-4d24-ba4d-50562038039f" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="post_posts_collection" id="7e5333cb-b01c-431d-947c-01ace41fab85" method="POST"><con:description>
Creates a new blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="3a8f17f5-8f45-4635-8a70-650d0051f3c9" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/" path="/blog/posts/archive/{year}/" id="2204cf26-ef7f-46a4-a3b5-347e5ccb1abe"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="d9d2f654-2587-48cb-9f72-807b7183897c" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="c381b4f0-7c76-40e1-8ea8-cc8289356579" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/{month}/" path="/blog/posts/archive/{year}/{month}/" id="32aa87f2-32fe-4870-812d-5786a0d22aea"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="57476bcc-2f28-40c6-b6ba-7e21e5de3af5" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="8a959f3e-62b1-44d4-8c32-3f25190e51aa" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/{month}/{day}/" path="/blog/posts/archive/{year}/{month}/{day}/" id="beb06b53-9e63-4b1a-bdfc-703d439922af"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="ecc9b8f6-1a8f-40ba-a8a3-428cbe5f952c" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="86cb78b6-00a2-4023-bcaf-485067e0d10a" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/{id}" path="/blog/posts/{id}" id="aba9c956-fed4-4b82-9267-1a7990bee786"><con:settings/><con:parameters/><con:method name="get_post_item" id="2b1547d8-ffb8-4d1f-b266-6e78a66a9f57" method="GET"><con:description>
Returns a blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="f486d3c0-7aa4-40b1-ab84-4fc93990ddff" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="put_post_item" id="285cba71-9c30-4895-89cf-2c866405f74c" method="PUT"><con:description>
Updates a blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="6a4f0846-0df0-40d3-8162-ca3d657264bd" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="delete_post_item" id="0bd66200-83a5-40c6-a7bf-b9861f1fa711" method="DELETE"><con:description>
Deletes blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="e33d6949-3ed3-4fff-ba9e-dd437ded78e3" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="1b655232-2ddc-4ad3-8be8-0d35c28c8948" wadlVersion="http://wadl.dev.java.net/2009/02" name="LumiraDX Blog API" type="rest" basePath="/api" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Prototype Blog API v0.2

[swagger.json](/api/swagger.json)</con:description><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://localhost:8888</con:endpoint></con:endpoints><con:resource name="/blog/categories/" path="/blog/categories/" id="0d107049-4fb7-4d78-95fd-ed3fc6b10139"><con:settings/><con:parameters/><con:method name="get_category_collection" id="71b42062-332e-4944-b1ec-7aa783399077" method="GET"><con:description>
Returns list of blog categories</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="4e4439d2-3e3a-4ccd-9041-6f9428fa1001" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="post_category_collection" id="26527b3e-d463-47d0-b34d-6677d2daecf6" method="POST"><con:description>* Send a JSON object with the new category's name in the request body.

```
{
  "name": "New Category Name"
}
```
Creates a new blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:request name="Request 1" id="b2c3c008-e45a-412a-9983-3460a19a34c2" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/categories/{id}" path="/blog/categories/{id}" id="72457353-d977-4304-aec7-9676e4208da6"><con:settings/><con:parameters/><con:method name="get_category_item" id="c8c8973d-4fc3-43ce-a287-cd6e807303f0" method="GET"><con:description>
Returns a category with a list of posts</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="bb138cf3-da11-4a93-b325-df5404c9c4f1" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="put_category_item" id="66c0be03-e358-4661-954e-45c709f26bfc" method="PUT"><con:description>Use this method to change the name of a blog category.

* Send a JSON object with the new name in the request body.

```
{
  "name": "New Category Name"
}
```

* Specify the ID of the category to modify in the request URL path.
Updates a blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="dbc84eed-7b4a-4eb9-ba9a-7aac0aaa5318" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="delete_category_item" id="6a6c87e8-613b-45b6-8591-a7a91b18144f" method="DELETE"><con:description>
Deletes blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>409</con:status><con:params/></con:representation><con:request name="Request 1" id="c3b1d779-9ac8-47a2-a403-ea0a2c70b9b3" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/" path="/blog/posts/" id="cffba3ea-79fe-4ef5-b69c-92be5a379026"><con:settings/><con:parameters/><con:method name="get_posts_collection" id="3d5fa367-4c2b-4687-a712-2e9c0b9aa272" method="GET"><con:description>
Returns list of blog posts</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="61e3e346-90ad-422f-9f9e-8d9e0e56775c" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="post_posts_collection" id="9f503599-38b2-4d92-91eb-3c2be74cbabf" method="POST"><con:description>
Creates a new blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="1bc96ab1-2bc0-42ee-9fd6-861da7b4abb9" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/" path="/blog/posts/archive/{year}/" id="34bea91d-d322-4b83-92c8-59d50c1b672c"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="f4874ebf-bad5-4196-b599-dc4a0c2a792b" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="cce7c2d3-e5a4-43b9-bb24-d49e172f9c1f" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/{month}/" path="/blog/posts/archive/{year}/{month}/" id="6e055daf-4394-470e-a182-b5d04f3bb9b2"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="393d4f73-b827-4307-9b01-e2c2fa23d113" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="7c002117-57b4-49c4-8901-6e2e886f7617" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/{month}/{day}/" path="/blog/posts/archive/{year}/{month}/{day}/" id="9ab16ddc-2df1-4ed9-b570-d768a181f530"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="65d26718-cbcc-407d-b4d3-f142c9f2f7a5" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="24b5eab2-6a8a-4c69-8bfa-7a803065c2c8" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/{id}" path="/blog/posts/{id}" id="3cd0037f-2af6-476e-af4a-e42a34b98026"><con:settings/><con:parameters/><con:method name="get_post_item" id="897f4542-2f59-4b24-9b0e-5ce98fe18c84" method="GET"><con:description>
Returns a blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="2b5bae6c-454b-4b8a-855a-d7e8e5f4e9fd" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="put_post_item" id="9ed7ceea-30db-4902-9d6e-1568eab7b839" method="PUT"><con:description>
Updates a blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="7c716746-4ede-437a-ba87-c94411c47e6b" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="delete_post_item" id="ee6094d7-f671-4d19-8168-db2956c06f43" method="DELETE"><con:description>
Deletes blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="ba82d6c3-bbd2-4749-a8ae-ea7ec779de43" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="320b3ff5-2309-4ef4-996d-102a3bffaa16" wadlVersion="http://wadl.dev.java.net/2009/02" name="LumiraDX Blog API" type="rest" basePath="/api" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Prototype Blog API v0.2

[swagger.json](/api/swagger.json)</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:8888</con:endpoint></con:endpoints><con:resource name="/blog/categories/" path="/blog/categories/" id="b3cf1abe-86ef-4525-8c33-c3b52ee5456f"><con:settings/><con:parameters/><con:method name="get_category_collection" id="b3814042-97bc-4caa-8d28-c5415feb414b" method="GET"><con:description>
Returns list of blog categories</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="post_category_collection" id="375c7719-29fc-45ab-a420-dfe3ec4d7346" method="POST"><con:description>* Send a JSON object with the new category's name in the request body.

```
{
  "name": "New Category Name"
}
```
Creates a new blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:request name="Request 1" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/categories/{id}" path="/blog/categories/{id}" id="3e955ee6-211e-449b-b643-6b25952de142"><con:settings/><con:parameters/><con:method name="get_category_item" id="78168cfc-1770-47e3-9189-517fd2a06731" method="GET"><con:description>
Returns a category with a list of posts</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="6e325d66-b18a-464a-bb10-d44d749121df" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="put_category_item" id="5bceaba5-da49-441e-828d-016746ba9ffe" method="PUT"><con:description>Use this method to change the name of a blog category.

* Send a JSON object with the new name in the request body.

```
{
  "name": "New Category Name"
}
```

* Specify the ID of the category to modify in the request URL path.
Updates a blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="2007397d-cd4f-44b0-a8e8-a6236728e4dd" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="delete_category_item" id="ab12afce-9f6a-4fb7-80ed-f7c524824ebf" method="DELETE"><con:description>
Deletes blog category</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>409</con:status><con:params/></con:representation><con:request name="Request 1" id="1a35ebe7-d7aa-4304-bf27-116198ecb378" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/" path="/blog/posts/" id="b5c419d4-7eaf-4aea-b939-3b3daeab72c8"><con:settings/><con:parameters/><con:method name="get_posts_collection" id="0d259ca5-5c2a-4c14-a15f-9d4a3a506739" method="GET"><con:description>
Returns list of blog posts</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="e139713d-52a6-4734-b976-39969d3b121a" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="post_posts_collection" id="759752ed-a664-4247-b9bd-a1e3909de620" method="POST"><con:description>
Creates a new blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="aff61b37-ff9c-4597-a5f6-5e7bf53dc774" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/" path="/blog/posts/archive/{year}/" id="7064fff4-7969-40f2-aa51-30ff6c6b6709"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="b67b57ee-8478-4601-931f-00df2151ab48" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="51ec5cd4-2f39-4911-aea0-51a3380326ab" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/{month}/" path="/blog/posts/archive/{year}/{month}/" id="da7d0fe3-5d1c-4be0-b210-793f97d72697"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="022c6056-4dcb-46d0-93a1-e1353789b4f5" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="cfed227a-69f5-47db-966c-dba0578a4b70" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/archive/{year}/{month}/{day}/" path="/blog/posts/archive/{year}/{month}/{day}/" id="1279e315-f1dc-437a-b3cd-73dbef6b9d82"><con:settings/><con:parameters/><con:method name="get_posts_archive_collection" id="702a3d52-d536-434a-9245-b97dc2bc83b2" method="GET"><con:description>
Returns list of blog posts from a specified time period</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>bool</con:name><con:style>QUERY</con:style><con:description>Page number</con:description></con:parameter><con:parameter><con:name>per_page</con:name><con:style>QUERY</con:style><con:description>Results per page {error_msg}</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="a1172dad-b022-49b6-a90b-9c51b9038a11" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="/blog/posts/{id}" path="/blog/posts/{id}" id="2c56ea6d-7596-49d1-8da1-f35b1c800adf"><con:settings/><con:parameters/><con:method name="get_post_item" id="3a0ee247-b001-4de6-8990-80e7835011c0" method="GET"><con:description>
Returns a blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="cc22c13c-c30c-4eb1-a213-91efff83c673" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="put_post_item" id="7b3d5084-ec6f-4e1e-8c28-667005e6cc28" method="PUT"><con:description>
Updates a blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="6847154d-4526-498c-afbd-246d5ec35b6f" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="delete_post_item" id="1ef78912-8d35-41b0-b516-909ac801091b" method="DELETE"><con:description>
Deletes blog post</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="3b539fd1-ae09-430d-b881-9c2d3ae43d2f" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="68a391ea-12b2-45b6-abe4-5d58f7117284" name="Test_Suite_1"><con:description>TestSuite generated for REST Service [LumiraDX Blog API]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="05e49f4b-7d9c-4f1f-a5f8-f8c916dcb615" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-1         Create &amp; Retrive Category" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Pre_Request_File" id="d29e6728-d3db-4db3-8b6d-d5f7aff4e449"><con:settings/><con:config><script>import groovy.io.FileType

try{
String folderPath = testRunner.testCase.testSuite.project.getPropertyValue("Folder")
new File(folderPath).eachFile (FileType.FILES) { file ->
//Delete file if file name contains Jenkins
   if (file.name.contains('Test_Report')) file.delete()
   log.info 'File Deleted Successfully'
}

}
catch (Exception ex){
	log.info'File not Exist'
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="Pre-Request(Retriving Max ID from DB)" id="9e7b410d-6e9e-4c25-91cd-abcda54d1c79"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select max(id) from category</con:query><con:assertion type="GroovyScriptAssertion" id="51f4d659-bea5-460e-912e-0777248ae80e" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:MAXID")

//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue('Id',DB_ID)

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Auto_Creation of Test Data" id="3d0843c4-df02-4d34-ac30-2b6106540e53"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('A'..'Z')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, Charset1.toCharArray())+RandomStringUtils.random(length2, Charset2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="a1a2c0ee-8efd-43a2-99f9-d7753a41c56e"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="28f572f6-527b-44f3-b641-b7a2dd0194a4" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="88130c0e-f0f9-4e8d-98db-59aee182d6ee"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-3 Retrving the Created Category Data" id="08ee5775-1703-427d-bb23-e65c60ea11e2"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 Retrving the Created Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info Id
def A =(jsonSlurper.id).toString()
Response_Id = A.replace("","")
log.info Response_Id
assert Id == Response_Id

//Verify Name attribute
def name = messageExchange.modelItem.testStep.testCase.getPropertyValue('Data')
log.info name
def Response_name = jsonSlurper.name
log.info Response_name
assert name == Response_name



</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TS-4 DB Validation" id="087f4c25-f804-4ee6-b941-1128c1682d07"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select * from category where ID = ${#Project#Id};</con:query><con:assertion type="JDBC Status" id="17e8e191-bb11-4aab-ada9-ba88fd12a58e" name="JDBC Status"/><con:assertion type="GroovyScriptAssertion" id="8254a812-db5a-46d9-a729-bac52a55da98" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:CATEGORY.ID")
def DB_NAME = responseHolder.getNodeValue("//*:Row/*:CATEGORY.NAME")
//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info API_ID
//ASSERTION
assert DB_ID == API_ID

//Name attribute Validation
def API_NAME = messageExchange.modelItem.testStep.testCase.getPropertyValue('Data')
log.info API_NAME

assert DB_NAME == API_NAME</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Report" id="f95fc05f-4466-45e2-aae7-414b707bb151"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTKA11</con:value></con:property></con:properties></con:testCase><con:testCase id="beb51319-1afe-4c9f-a318-a55c1a432156" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-2          Create,Update &amp; Retrive Category" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="489fdbb6-9a17-4bbd-9d08-378d98a7d804"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String A1 = (('A'..'Z')).join()
Integer length1 = 2

String A2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, A1.toCharArray())+RandomStringUtils.random(length2, A2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Random String for Update 
String A3 = (('A'..'Z')).join()
Integer length3 = 2

String A4 = (('0'..'9')).join()
Integer length4 = 2

def Data1 = 'TEST'+RandomStringUtils.random(length1, A3.toCharArray())+RandomStringUtils.random(length4, A4.toCharArray())
log.info "Data1  " + Data1 
//Storing in Temp memory &amp; Retrving data
def UPDATE = testRunner.testCase.setPropertyValue('PUT_Data',Data1)
def TC_PUT_01 =  testRunner.testCase.getPropertyValue('PUT_Data')
log.info TC_PUT_01


//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="2ba5fb15-a734-4606-b139-8ddb94479e01"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="254a9d45-781b-4f7c-80b5-ef3bbcfa8149" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="589846e2-f18a-406b-9e48-c9c43549a522"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
}</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-3 PUT Update Category" id="7b2ee850-c77c-45b8-a375-798220fc5e5e"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="put_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 PUT Update Category" id="a924914a-d494-4226-b729-d0781953c2b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
  
  "name": "${#TestCase#PUT_Data}"
}</con:request><con:originalUri>http://localhost/api/blog/categories/100</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0b45ecbb-28af-4eb3-9a92-7099bfe0d485" name="Valid HTTP Status Codes"><con:configuration><codes>204
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-4 Retrieving the Updated Category Data" id="f3ff1407-46ef-453b-bc24-da6173c86ae4"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-4 Retrieving the Updated Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info Id
def A =(jsonSlurper.id).toString()
Response_Id = A.replace("","")
log.info Response_Id
assert Id == Response_Id

//Verify Updated Name attribute
def name = messageExchange.modelItem.testStep.testCase.getPropertyValue('PUT_Data')
log.info name
def Response_name = jsonSlurper.name
log.info Response_name
assert name == Response_name



</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TS-5 DB Validation" id="c01804e7-90d9-4281-b9ac-09049ae5192c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select * from category where ID = ${#Project#Id};</con:query><con:assertion type="JDBC Status" id="17e8e191-bb11-4aab-ada9-ba88fd12a58e" name="JDBC Status"/><con:assertion type="GroovyScriptAssertion" id="8254a812-db5a-46d9-a729-bac52a55da98" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:CATEGORY.ID")
def DB_NAME = responseHolder.getNodeValue("//*:Row/*:CATEGORY.NAME")
//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info API_ID
//ASSERTION
assert DB_ID == API_ID

//Updated Name attribute Validation
def API_PUT_NAME = messageExchange.modelItem.testStep.testCase.getPropertyValue('PUT_Data')
log.info API_PUT_NAME

assert DB_NAME == API_PUT_NAME</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Report" id="646a46ca-124c-4270-9dd4-b49a917ae45b"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>122</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTIM34</con:value></con:property><con:property><con:name>PUT_Data</con:name><con:value>TESTBB79</con:value></con:property></con:properties></con:testCase><con:testCase id="33fa80ef-568f-4788-99c7-a122339976d2" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-3          Create,Update,DELETE &amp; Retrive Category" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="e449c263-1748-4340-a728-a40306e069a1"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String A1 = (('A'..'Z')).join()
Integer length1 = 2

String A2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, A1.toCharArray())+RandomStringUtils.random(length2, A2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Random String for Update 
String A3 = (('A'..'Z')).join()
Integer length3 = 2

String A4 = (('0'..'9')).join()
Integer length4 = 2

def Data1 = 'TEST'+RandomStringUtils.random(length1, A3.toCharArray())+RandomStringUtils.random(length4, A4.toCharArray())
log.info "Data1  " + Data1 
//Storing in Temp memory &amp; Retrving data
def UPDATE = testRunner.testCase.setPropertyValue('PUT_Data',Data1)
def TC_PUT_01 =  testRunner.testCase.getPropertyValue('PUT_Data')
log.info TC_PUT_01


//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="13ba7ae7-f4de-40b4-a5d6-a642aa662d42"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="87acd624-dde0-4204-8b74-c9390da1fa33" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="e9aacedb-7b4b-4020-94ba-6e835ce744d2"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
}</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-3 PUT Update Category" id="16a45533-6f87-4f9f-8edb-0f73e83b99a1"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="put_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 PUT Update Category" id="a924914a-d494-4226-b729-d0781953c2b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
  
  "name": "${#TestCase#PUT_Data}"
}</con:request><con:originalUri>http://localhost/api/blog/categories/100</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0b45ecbb-28af-4eb3-9a92-7099bfe0d485" name="Valid HTTP Status Codes"><con:configuration><codes>204
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-4 Retrieving the Updated Category Data" id="8545afa7-b442-4f26-89a0-07bd09df3f4d"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-4 Retrieving the Updated Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info Id
def A =(jsonSlurper.id).toString()
Response_Id = A.replace("","")
log.info Response_Id
assert Id == Response_Id

//Verify Updated Name attribute
def name = messageExchange.modelItem.testStep.testCase.getPropertyValue('PUT_Data')
log.info name
def Response_name = jsonSlurper.name
log.info Response_name
assert name == Response_name



</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TS-5 DB Validation for Update" id="52679840-4781-4795-9519-ba1f35c1d7ca"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select * from category where ID = ${#Project#Id};</con:query><con:assertion type="JDBC Status" id="17e8e191-bb11-4aab-ada9-ba88fd12a58e" name="JDBC Status"/><con:assertion type="GroovyScriptAssertion" id="8254a812-db5a-46d9-a729-bac52a55da98" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:CATEGORY.ID")
def DB_NAME = responseHolder.getNodeValue("//*:Row/*:CATEGORY.NAME")
//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info API_ID
//ASSERTION
assert DB_ID == API_ID

//Updated Name attribute Validation
def API_PUT_NAME = messageExchange.modelItem.testStep.testCase.getPropertyValue('PUT_Data')
log.info API_PUT_NAME

assert DB_NAME == API_PUT_NAME</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="TS-6 Delete Category" id="4f2a66d7-5891-4d99-80c9-352915078478"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="delete_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-6 Delete Category" id="454e1f22-6cdd-439f-aa45-5d4009d87460" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/122</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="dfd6948a-b677-4590-a6d9-c01e54fe558a" name="Valid HTTP Status Codes"><con:configuration><codes>204
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-7 Retrieving the Deleted Category Data" id="965e84ee-ccb2-4ecc-88f1-2b83dd0d959c"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-7 Retrieving the Deleted Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
//log.info Id
def A =(jsonSlurper.id)
Response_Id = A
log.info Response_Id
assert Response_Id == null


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TS-8 DB Validation for Delete" id="1941cbda-20b5-404d-9829-ecdcd292f4c1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select * from category where ID = ${#Project#Id};</con:query><con:assertion type="JDBC Status" id="17e8e191-bb11-4aab-ada9-ba88fd12a58e" name="JDBC Status"/><con:assertion type="GroovyScriptAssertion" id="8254a812-db5a-46d9-a729-bac52a55da98" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:CATEGORY.ID")
def DB_NAME = responseHolder.getNodeValue("//*:Row/*:CATEGORY.NAME")
//validating DB column is not null
assert DB_ID == null
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Report" id="91db6c86-c9d7-493b-b553-029a2a4331ac"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>122</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTBE53</con:value></con:property><con:property><con:name>PUT_Data</con:name><con:value>TESTSK01</con:value></con:property></con:properties></con:testCase><con:testCase id="1a2f252f-3577-4380-a26d-af0967d2cfb3" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-4          Create,DELETE &amp; Retrive Category" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="cae79253-4daa-4f99-9500-fe256b963dc3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String A1 = (('A'..'Z')).join()
Integer length1 = 2

String A2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, A1.toCharArray())+RandomStringUtils.random(length2, A2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Random String for Update 
String A3 = (('A'..'Z')).join()
Integer length3 = 2

String A4 = (('0'..'9')).join()
Integer length4 = 2

def Data1 = 'TEST'+RandomStringUtils.random(length1, A3.toCharArray())+RandomStringUtils.random(length4, A4.toCharArray())
log.info "Data1  " + Data1 
//Storing in Temp memory &amp; Retrving data
def UPDATE = testRunner.testCase.setPropertyValue('PUT_Data',Data1)
def TC_PUT_01 =  testRunner.testCase.getPropertyValue('PUT_Data')
log.info TC_PUT_01


//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="64aca776-451a-412d-822e-b19443f0ffad"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="d142d37e-a8d4-4388-8ff8-f2494b726ef2"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
}</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-3 Retrving the Created Category Data" id="f5d4d4bd-99e6-409b-b6a6-7ff709de92ab"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 Retrving the Created Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info Id
def A =(jsonSlurper.id).toString()
Response_Id = A.replace("","")
log.info Response_Id
assert Id == Response_Id

//Verify Name attribute
def name = messageExchange.modelItem.testStep.testCase.getPropertyValue('Data')
log.info name
def Response_name = jsonSlurper.name
log.info Response_name
assert name == Response_name



</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-4 Delete Category" id="1ac16bc5-4167-4365-86f9-ce380c3099a7"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="delete_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-4 Delete Category" id="454e1f22-6cdd-439f-aa45-5d4009d87460" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/122</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="dfd6948a-b677-4590-a6d9-c01e54fe558a" name="Valid HTTP Status Codes"><con:configuration><codes>204
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-5 Retrieving the Deleted Category Data" id="728fee09-d6ec-4947-b9fb-7ce1a9575ebf"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-5 Retrieving the Deleted Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
//log.info Id
def A =(jsonSlurper.id)
Response_Id = A
log.info Response_Id
assert Response_Id == null


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TS-6 DB Validation for Delete" id="1a72c1f0-fca6-4ae1-a354-414304abad37"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select * from category where ID = ${#Project#Id};</con:query><con:assertion type="JDBC Status" id="17e8e191-bb11-4aab-ada9-ba88fd12a58e" name="JDBC Status"/><con:assertion type="GroovyScriptAssertion" id="8254a812-db5a-46d9-a729-bac52a55da98" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:CATEGORY.ID")
def DB_NAME = responseHolder.getNodeValue("//*:Row/*:CATEGORY.NAME")
//validating DB column is not null
assert DB_ID == null
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Report" id="22a0bccb-b41e-42d2-b9b3-3fa63d098310"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>122</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTJB38</con:value></con:property><con:property><con:name>PUT_Data</con:name><con:value>TESTNU68</con:value></con:property></con:properties></con:testCase><con:testCase id="87b6aca3-35dc-4340-8786-cd1faedd35f7" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-5          Create with existing ID(Unique key Constrain Validation)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="c6385465-7c7d-4ffe-8752-c50b8e38f334"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('A'..'Z')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, Charset1.toCharArray())+RandomStringUtils.random(length2, Charset2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="930c7a9f-dddf-458f-8cef-d229e6f9129a"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f841077d-7069-44f3-a218-98e03ca296f0" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="eebcfcd9-61fb-40d8-aa6b-54c394be0c22"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-3 Retrving the Created Category Data" id="1ce3fa17-49cd-4011-ae9f-24cc786c350d"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 Retrving the Created Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info Id
def A =(jsonSlurper.id).toString()
Response_Id = A.replace("","")
log.info Response_Id
assert Id == Response_Id

//Verify Name attribute
def name = messageExchange.modelItem.testStep.testCase.getPropertyValue('Data')
log.info name
def Response_name = jsonSlurper.name
log.info Response_name
assert name == Response_name



</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TS-4 DB Validation" id="f88c216b-1b9a-47e5-a41b-ff2073419fe0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select * from category where ID = ${#Project#Id};</con:query><con:assertion type="JDBC Status" id="17e8e191-bb11-4aab-ada9-ba88fd12a58e" name="JDBC Status"/><con:assertion type="GroovyScriptAssertion" id="8254a812-db5a-46d9-a729-bac52a55da98" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:CATEGORY.ID")
def DB_NAME = responseHolder.getNodeValue("//*:Row/*:CATEGORY.NAME")
//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info API_ID
//ASSERTION
assert DB_ID == API_ID

//Name attribute Validation
def API_NAME = messageExchange.modelItem.testStep.testCase.getPropertyValue('Data')
log.info API_NAME

assert DB_NAME == API_NAME</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="TS-5 Create Category with existing ID" id="f5904d06-7f37-4e86-9b76-dcf349ac1e28"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-5 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="b6357be9-943b-434f-a3aa-eec8accdfc5f"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTJW17</con:value></con:property></con:properties></con:testCase><con:testCase id="6aaedb74-e74e-47ed-b84f-6a6e2b3b5788" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-6          Data_Type Validation in Create(Passing Integer in name Attribute)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="3c3c7b10-0f15-4462-a77f-409a71e337a6"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('0'..'5')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = RandomStringUtils.random(length1, Charset1.toCharArray())+RandomStringUtils.random(length2, Charset2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="4fe74e2e-5b37-42fa-a2e5-fdbe079e3295"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f841077d-7069-44f3-a218-98e03ca296f0" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="642c71f1-f589-4675-a588-49576522690f"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	
	"id":${#Project#Id},
  "name": ${#TestCase#Data}
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="06e2aee7-8a13-45a1-96af-bd0275c1b571"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value>1393</con:value></con:property></con:properties></con:testCase><con:testCase id="7acba992-0832-4ed6-92bc-537b7b9d50f9" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-7          Data_Type Validation in Create(Passing String in ID Attribute)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="96c9c107-9ad9-4b1f-afde-464eb3189b67"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('A'..'Z')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, Charset1.toCharArray())+RandomStringUtils.random(length2, Charset2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="58ac6d4d-7ec1-48c3-96c8-f562199da82b"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f841077d-7069-44f3-a218-98e03ca296f0" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="d72a916f-9e58-430a-88c9-ae9efd7032d5"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	
	"id":"${#Project#Id}",
  "name": "${#TestCase#Data}"
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="0aaf6d49-4bbc-4135-8583-ab8e0f129a48"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTYB60</con:value></con:property></con:properties></con:testCase><con:testCase id="e4761b7f-1f31-4c38-87c3-860451685597" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-8          Schema Validation in Create(Passing ID alone in  Payload)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="7eed226f-fb5d-452e-950e-e27971de8154"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('A'..'Z')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, Charset1.toCharArray())+RandomStringUtils.random(length2, Charset2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="f4fe8eec-b8f8-4324-89ec-ff65c5763c11"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f841077d-7069-44f3-a218-98e03ca296f0" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="aa90eea0-3d28-4b79-98f2-e5acf85b46a7"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	
	"id":${#Project#Id},
 
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="31ab726c-3cb5-4113-92bc-550ec1f4ca49"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTEP54</con:value></con:property></con:properties></con:testCase><con:testCase id="28553ac1-9f40-4e8e-a557-75cce73f301f" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-9          Schema Validation in Create(Passing null in name value)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="4e89dae9-3392-4dc6-82fd-7a2701de6561"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('A'..'Z')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = ''
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data (passing null to name attribute)
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="7160b6a4-d71f-4941-8e4c-dacb0ada4fbc"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f841077d-7069-44f3-a218-98e03ca296f0" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="dd33b40e-c34b-4c56-b035-d8e1f181abf6"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-3 Retrving the Created Category Data" id="0ba17d19-82d9-478f-ad0a-7af76243088e"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 Retrving the Created Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info Id
def A =(jsonSlurper.id).toString()
Response_Id = A.replace("","")
log.info Response_Id
assert Id == Response_Id

//Verify Name attribute
def name = messageExchange.modelItem.testStep.testCase.getPropertyValue('Data')
log.info name
def Response_name = jsonSlurper.name
log.info Response_name
assert name == Response_name



</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="166f228f-e648-4405-a269-92bec02d65e6"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="905519c6-a4e3-455f-a3d9-a4933d63d213" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-10        Schema Validation in Create(Passing 0 in ID value)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="174c42dd-1701-406d-a1e6-01c82adb3869"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('A'..'Z')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, Charset1.toCharArray())+RandomStringUtils.random(length2, Charset2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Passing 0  for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = 0
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="a128f49a-7e36-4e47-b0d4-069b13ff5f44"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f841077d-7069-44f3-a218-98e03ca296f0" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="8cce7f9a-204d-4e1f-8514-93ea7a0c9c97"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TS-3 DB Validation" id="42579be5-31e9-4b26-9340-862bb4049fcd"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select max(id) from category </con:query><con:assertion type="JDBC Status" id="17e8e191-bb11-4aab-ada9-ba88fd12a58e" name="JDBC Status"/><con:assertion type="GroovyScriptAssertion" id="8254a812-db5a-46d9-a729-bac52a55da98" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:MAXID")

//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue('Id',DB_ID)

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="TS-4 Retrving the Created Category Data" id="4b5d6c55-044d-4744-89cb-54e5b6a21747"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 Retrving the Created Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0754f6d2-ff24-41d2-92c3-d9d700be6103" name="Script Assertion"><con:configuration><scriptText>//imports
import groovy.json.JsonSlurper
import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*

//grab the response
def ResponseMessage = messageExchange.response.responseContent

def TrimResponse =ResponseMessage.replaceAll('^\"|\"$','').replaceAll('^ \\[|\\]$','').replaceAll('\\\\','')


//define a JsonSlurper
def jsonSlurper = new JsonSlurper().parseText(TrimResponse)


//verify the Json isn't empty
assert !(jsonSlurper.isEmpty())

//Verify Id attribute
def Id = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue('Id')
log.info Id
def A =(jsonSlurper.id).toString()
Response_Id = A.replace("","")
log.info Response_Id
assert Id == Response_Id

//Verify Name attribute
def name = messageExchange.modelItem.testStep.testCase.getPropertyValue('Data')
log.info name
def Response_name = jsonSlurper.name
log.info Response_name
assert name == Response_name



</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="4cd9d024-6ad7-442e-b795-62529009885e"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTAE29</con:value></con:property></con:properties></con:testCase><con:testCase id="007af1b3-cda3-47fa-8639-6f13809edf1d" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-11        Invalid Payload(Schema Validation)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="e2066914-4d4a-41ac-95c2-fed34a237332"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('A'..'Z')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, Charset1.toCharArray())+RandomStringUtils.random(length2, Charset2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="f52c6bb3-2c22-4cd8-a0ae-5789252f3830"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="28f572f6-527b-44f3-b641-b7a2dd0194a4" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="c1ed84e9-a5e1-4f82-bdf3-abf55f0d29e8"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id":${#Project#Id},
  "name": "${#TestCase#Data}"
  "name": "${#TestCase#Data}"
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="4f4fe7e2-15b6-4c08-9e6d-45cfaa8abd3c"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTAN06</con:value></con:property></con:properties></con:testCase><con:testCase id="675ed939-ec95-42f4-8096-5588e3bf77ce" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-12        Invalid Payload(Schema Validation)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="13529394-e147-41fc-8238-57083a9b6f8f"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String Charset1 = (('A'..'Z')).join()
Integer length1 = 2

String Charset2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, Charset1.toCharArray())+RandomStringUtils.random(length2, Charset2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Auto Increment for ID Attribute
def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id

def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('Data',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="7748bf50-cace-48fa-8008-fa199c8d4ae0"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="28f572f6-527b-44f3-b641-b7a2dd0194a4" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Create New Category" id="887e749e-30e6-4d0f-895b-e1053277f95d"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="post_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-2 Create New Category" id="c9f3a435-2523-4199-b606-9a3d5479174b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
	"id1":${#Project#Id},
  "name1": "${#TestCase#Data}"
}


</con:request><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133462b1-4a36-4d08-a3d2-444afe289935" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="425d5c7f-5ea4-4730-b09d-1b926819329e"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>121</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTQG52</con:value></con:property></con:properties></con:testCase><con:testCase id="6137ec1b-d4e7-41a0-9f4f-ab8e9f1fbc76" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-13          Update with invalid ID" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="ee421382-6c8e-43de-8481-b6a7e3f0e547"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String A1 = (('A'..'Z')).join()
Integer length1 = 2

String A2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, A1.toCharArray())+RandomStringUtils.random(length2, A2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Random String for Update 
String A3 = (('A'..'Z')).join()
Integer length3 = 2

String A4 = (('0'..'9')).join()
Integer length4 = 2

def Data1 = 'TEST'+RandomStringUtils.random(length1, A3.toCharArray())+RandomStringUtils.random(length4, A4.toCharArray())
log.info "Data1  " + Data1 
//Storing in Temp memory &amp; Retrving data
def UPDATE = testRunner.testCase.setPropertyValue('PUT_Data',Data1)
def TC_PUT_01 =  testRunner.testCase.getPropertyValue('PUT_Data')
log.info TC_PUT_01


//Auto Increment for ID Attribute
/*def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id*/
String A5 = (('0'..'9')).join()
Integer length5 = 4

def Id = RandomStringUtils.random(length5, A5.toCharArray())
log.info "ID  " + Id 


def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('ID',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="cf99fe31-45e1-47c8-b4c7-9ab425d969b7"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="254a9d45-781b-4f7c-80b5-ef3bbcfa8149" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 PUT Update Category" id="aa649512-8c6f-4725-b0c0-cdfac4bb024f"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="put_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 PUT Update Category" id="a924914a-d494-4226-b729-d0781953c2b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
  
  "name": "${#TestCase#PUT_Data}"
}</con:request><con:originalUri>http://localhost/api/blog/categories/100</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0b45ecbb-28af-4eb3-9a92-7099bfe0d485" name="Valid HTTP Status Codes"><con:configuration><codes>404

</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="1c4fde14-fce7-47a9-bf12-cd2a848b79da"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:testStep type="jdbc" name="Pre-Request(Retriving Max ID from DB)" id="1c469606-a724-4bad-a5d6-2b62cca25e57"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select max(id) from category</con:query><con:assertion type="GroovyScriptAssertion" id="51f4d659-bea5-460e-912e-0777248ae80e" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:MAXID")

//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue('Id',DB_ID)

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>TESTBU72</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTBU72</con:value></con:property><con:property><con:name>PUT_Data</con:name><con:value>TESTET80</con:value></con:property></con:properties></con:testCase><con:testCase id="240108bf-a118-4457-b0c3-4f4583ac41ce" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-14          Delete with Invalid ID" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="c106c8c7-56c7-4887-a2e5-131b2116f2ab"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String A1 = (('A'..'Z')).join()
Integer length1 = 2

String A2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, A1.toCharArray())+RandomStringUtils.random(length2, A2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Random String for Update 
String A3 = (('A'..'Z')).join()
Integer length3 = 2

String A4 = (('0'..'9')).join()
Integer length4 = 2

def Data1 = 'TEST'+RandomStringUtils.random(length1, A3.toCharArray())+RandomStringUtils.random(length4, A4.toCharArray())
log.info "Data1  " + Data1 
//Storing in Temp memory &amp; Retrving data
def UPDATE = testRunner.testCase.setPropertyValue('PUT_Data',Data1)
def TC_PUT_01 =  testRunner.testCase.getPropertyValue('PUT_Data')
log.info TC_PUT_01


//Auto Increment for ID Attribute
/*def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id*/
String A5 = (('0'..'9')).join()
Integer length5 = 4

def Id = RandomStringUtils.random(length5, A5.toCharArray())
log.info "ID  " + Id 


def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('ID',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 GET Data Before Category Creation" id="51b7ee0b-6915-4523-af1f-d843aa65cb09"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/" methodName="get_category_collection" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-1 GET Data Before Category Creation" id="7a0de1fa-c3de-4c1f-a48d-8f4f9f770fcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TS-2 Delete Category" id="03a57f36-b4b7-424c-9871-e07f76aa912e"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="delete_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-4 Delete Category" id="454e1f22-6cdd-439f-aa45-5d4009d87460" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/api/blog/categories/122</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="dfd6948a-b677-4590-a6d9-c01e54fe558a" name="Valid HTTP Status Codes"><con:configuration><codes>404
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="b3d2785e-c535-4e86-92ec-074a31b6776d"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:testStep type="jdbc" name="Pre-Request(Retriving Max ID from DB)" id="39f019f8-2c52-47f8-bc26-cfd2a83b38a5"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select max(id) from category</con:query><con:assertion type="GroovyScriptAssertion" id="51f4d659-bea5-460e-912e-0777248ae80e" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:MAXID")

//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue('Id',DB_ID)

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>TESTQO61</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTQO61</con:value></con:property><con:property><con:name>PUT_Data</con:name><con:value>TESTJT68</con:value></con:property></con:properties></con:testCase><con:testCase id="3316b94b-9ea3-4a42-bcb2-e1767e8ff20a" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="TC-15         GET with Invalid ID" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Auto_Creation of Test Data" id="3cacb40a-2749-4f33-8af4-50abfe72ee86"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
//Random alphanumberic String generation for Category attribute
String A1 = (('A'..'Z')).join()
Integer length1 = 2

String A2 = (('0'..'9')).join()
Integer length2 = 2

def Data = 'TEST'+RandomStringUtils.random(length1, A1.toCharArray())+RandomStringUtils.random(length2, A2.toCharArray())
log.info "Data  " + Data 
//Storing in Temp memory &amp; Retrving data
def CREATE = testRunner.testCase.setPropertyValue('Data',Data)
def TC_01 =  testRunner.testCase.getPropertyValue('Data')
log.info TC_01

//Random String for Update 
String A3 = (('A'..'Z')).join()
Integer length3 = 2

String A4 = (('0'..'9')).join()
Integer length4 = 2

def Data1 = 'TEST'+RandomStringUtils.random(length1, A3.toCharArray())+RandomStringUtils.random(length4, A4.toCharArray())
log.info "Data1  " + Data1 
//Storing in Temp memory &amp; Retrving data
def UPDATE = testRunner.testCase.setPropertyValue('PUT_Data',Data1)
def TC_PUT_01 =  testRunner.testCase.getPropertyValue('PUT_Data')
log.info TC_PUT_01


//Auto Increment for ID Attribute
/*def incrementValue = testRunner.testCase.testSuite.project.getPropertyValue("Id");
Id = incrementValue.toInteger() + 1;
log.info Id*/
String A5 = (('0'..'9')).join()
Integer length5 = 4

def Id = RandomStringUtils.random(length5, A5.toCharArray())
log.info "ID  " + Id 


def Id1 = testRunner.testCase.testSuite.project.setPropertyValue('Id',Id.toString())
def name = testRunner.testCase.setPropertyValue('ID',TC_01.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="TS-1 Retrving the Created Category Data" id="8e751064-0b7a-4163-9eb2-eb49bc1caecc"><con:settings/><con:config service="LumiraDX Blog API" resourcePath="/api/blog/categories/{id}" methodName="get_category_item" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TS-3 Retrving the Created Category Data" id="840c4c51-7906-4801-a40a-f8bb487732e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6fa8d55-06da-4f83-b263-4f6913f8a332" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Project#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="72000b34-974e-4d18-a569-5773daf65f48"><con:settings/><con:config><script>import groovy.lang.* 
import groovy.util.* 

import com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep 
import com.eviware.soapui.model.testsuite.TestRunner 
import com.eviware.soapui.impl.wsdl.panels.support.MockTestRunner 
import com.eviware.soapui.model.testsuite.* 
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus 
import com.eviware.soapui.model.testsuite.TestStepResult; 
import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def TCName=context.testCase.name

def format1=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new java.util.Date())
def Date1 = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", format1).format("MM-dd-yyyy-HH-mm-ss-SSS");
log.info 'c'
File1= testRunner.testCase.testSuite.project.getPropertyValue("File_name")


File5=TCName+"_"
//File2=Date1
File3=".xls"
File4=File1+File3
log.info File4
File f = new File(File4)

def folder = new File(testRunner.testCase.testSuite.project.getPropertyValue("Folder") )
log.info folder
if( !folder.exists() ) {
  // Create all folders up-to and including B
  folder.mkdirs()
}

if(f.exists()!= true )

{

// Directory path where the xls file will be created
String destinationFilePath = f;
log.info f
// Create object of FileOutputStream
FileOutputStream fout = new FileOutputStream(destinationFilePath);

try{

// Build the Excel File
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
HSSFWorkbook workBook = new HSSFWorkbook();

// Create the spreadsheet
HSSFSheet spreadSheet = workBook.createSheet("RegressionTestResults");

// Create the first row
HSSFRow row = spreadSheet.createRow((short) 0);

// Create the cells and write to the file
HSSFCell cell;

//Style
HSSFCellStyle backgroundStyle = workBook.createCellStyle();


backgroundStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
backgroundStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);


backgroundStyle.setBorderBottom(CellStyle.BORDER_THIN);
backgroundStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderLeft(CellStyle.BORDER_THIN);
backgroundStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderRight(CellStyle.BORDER_THIN);
backgroundStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
backgroundStyle.setBorderTop(CellStyle.BORDER_THIN);
backgroundStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());

       

// Write the headers
cell = row.createCell(0);
cell.setCellValue(new HSSFRichTextString("Project_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(1);
cell.setCellValue(new HSSFRichTextString("Test_Suite_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(2);
cell.setCellValue(new HSSFRichTextString("Test_Case_Name"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(3);
cell.setCellValue(new HSSFRichTextString("Test_Case_ID"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(4);
cell.setCellValue(new HSSFRichTextString("Status"));
cell.setCellStyle(backgroundStyle);

cell = row.createCell(5);
cell.setCellValue(new HSSFRichTextString("Date"));
cell.setCellStyle(backgroundStyle);

workBook.write(outputStream);

outputStream.writeTo(fout);
outputStream.close();

fout.close();
}

catch ( IOException ex){

    FileInputStream file = new FileInputStream(f1);
    HSSFWorkbook workbook = new HSSFWorkbook (file);
    HSSFSheet sheet    = workbook.getSheetAt(0);
    rowNum=sheet.getLastRowNum()
     
     def h;
         
     for(int i=0;i&lt;8;i++)
   { 
	if(i==0)
		h= "Project_Name";
	else if(i==1)
		h= "Test_Suite_Name";
	else if(i==2)
		h= "Test_Case_Name";
	else if(i==3)
		h= "Test_Case_ID";
	else if(i==4)	
	     h="Status";
	else if(i==5)	
	     h= "Date";

      row.createCell(i).setCellValue(h)
                    
 }
 }

}
def TestCase = testRunner.getTestCase()
def StepList = TestCase.getTestStepList()
StepList.each{
    if(it.metaClass.hasProperty(it,'assertionStatus')){
	             Project_Name= testRunner.testCase.testSuite.project.name
	             Test_Suite_Name= testRunner.testCase.testSuite.name
	             Test_Case_Name=context.testCase.name
	             Test_Case_ID=it.name
	             r=it.assertionStatus
			   if(it.assertionStatus == AssertionStatus.FAILED)
			   {
			   	Status="Fail"
			   }
			   else
			   {
			   	Status="Pass"
			   }

			//def a= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getRequestContent()

			//def b= testRunner.testCase.testSteps[Test_Case_ID].testRequest.response.getResponseContent()

			def date1=new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())

			def f1 = f
			if(f.exists()== true )
			{ 

				    FileInputStream file = new FileInputStream(f1);
				    HSSFWorkbook workbook = new HSSFWorkbook (file);
				    HSSFSheet sheet    = workbook.getSheetAt(0);
			         rowNum=sheet.getLastRowNum()
			         count= rowNum+1

			         
			         FileOutputStream out = new FileOutputStream(f1);
			         Row row = sheet.createRow(count);


				   row.createCell(0).setCellValue(Project_Name)
				   sheet.autoSizeColumn(0);
				   row.createCell(1).setCellValue(Test_Suite_Name)
				   sheet.autoSizeColumn(1);
				   row.createCell(2).setCellValue(Test_Case_Name)
				   sheet.autoSizeColumn(2);
				   row.createCell(3).setCellValue(Test_Case_ID)
				   sheet.setColumnWidth(3, 10000)				  
				   row.createCell(4).setCellValue(Status)   
				   sheet.autoSizeColumn(4);
				   row.createCell(5).setCellValue(date1)
				   sheet.autoSizeColumn(5);
				   workbook.write(out);
				   out.close(); 
			}
			else {
				log.info("Excel Failed")
			}
			
    }
}

 def dontCare = null;</script></con:config></con:testStep><con:testStep type="jdbc" name="Pre-Request(Retriving Max ID from DB)" id="a791cbff-8bec-49a9-8b2a-4f3d3ca9283e"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.sqlite.JDBC</con:driver><con:connectionString>jdbc:sqlite:C:\Users\DineshGopal\Downloads\rest_api_demo-techtest1.1\rest_api_demo-techtest1.1\rest_api_demo\db.sqlite</con:connectionString><con:query>select max(id) from category</con:query><con:assertion type="GroovyScriptAssertion" id="51f4d659-bea5-460e-912e-0777248ae80e" name="Script Assertion"><con:configuration><scriptText>import groovy.lang.*
import groovy.util.*
import com.eviware.soapui.model.testsuite.TestRunner
import com.eviware.soapui.model.testsuite.*
import org.xml.sax.helpers.DefaultHandler
import groovy.util.XmlSlurper
import com.eviware.soapui.support.xml.XmlUtils
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
               
  
//Retriving DB Value
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def DB_ID = responseHolder.getNodeValue("//*:Row/*:MAXID")

//validating DB column is not null
assert DB_ID != null
//Retriving REST API Data
def API_ID = messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue('Id',DB_ID)

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>TESTUI79</con:value></con:property><con:property><con:name>Data</con:name><con:value>TESTUI79</con:value></con:property><con:property><con:name>PUT_Data</con:name><con:value>TESTJN87</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>Id</con:name><con:value>292</con:value></con:property><con:property><con:name>File_name</con:name><con:value>C://Users//DineshGopal//Desktop//POC//Test_Report</con:value></con:property><con:property><con:name>Folder</con:name><con:value>C://Users//DineshGopal//Desktop//POC//</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>